name: Go Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: go build -v ./...

    - name: Run Tests
      run: go test -v ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: go build -v ./...

    - name: Run golangci-lint
      # You may pin to the exact commit or the version.
      # uses: golangci/golangci-lint-action@04eca2038305127fb1e6683425b6864cd5612f2d
      uses: golangci/golangci-lint-action@v1.2.1
      with:
        # version of golangci-lint to use in form of v1.2.3
        version: v1.33.0
        # # golangci-lint command line arguments
        # args: # optional, default is 
        # # golangci-lint working directory, default is project root
        # working-directory: # optional
        # # the token is used for fetching patch of a pull request to show only new issues
        # github-token: # default is ${{ github.token }}
        # # if set to true and the action runs on a pull request - the action outputs only newly found issues
        # only-new-issues: 
